library(keras)
library(tensorflow)
load_image <- function(filename) {
   ret = list()
    f = file(filename,'rb')
    readBin(f,'integer',n=1,size=4,endian='big')
    ret$n = readBin(f,'integer',n=1,size=4,endian='big')
    nrow = readBin(f,'integer',n=1,size=4,endian='big')
    ncol = readBin(f,'integer',n=1,size=4,endian='big')
    x = readBin(f,'integer',n=ret$n*nrow*ncol,size=1,signed=F)
    ret$x = matrix(x, ncol=nrow*ncol, byrow=T)
    close(f)
    ret
}

load_label <- function(filename) {
    f = file(filename,'rb')
    readBin(f,'integer',n=1,size=4,endian='big')
    n = readBin(f,'integer',n=1,size=4,endian='big')
    y = readBin(f,'integer',n=n,size=1,signed=F)
    close(f)
    y
}

train_image <- load_image("train-images.idx3-ubyte")
test_image <- load_image("t10k-images.idx3-ubyte")

train_lab <- load_label("train-labels.idx1-ubyte")
test_lab <- load_label("t10k-labels.idx1-ubyte") 

train_image <- train_image$x
test_image <- test_image$x

train_image <- train_image/255
test_image <- test_image/255
train_labels<- to_categorical(train_lab,10)
test_labels <- to_categorical(test_lab,10)
model <- keras_model_sequential()
model %>% layer_dense(units=512,activation = 'relu',input_shape = c(784)) %>% layer_dropout(rate=0.4) %>% layer_dense(units=256,activation='relu') %>%layer_dropout(rate=0.3) %>% layer_dense(units=10,activation='softmax')
model %>% compile(loss='categorical_crossentropy',optimizer= optimizer_rmsprop(),metrics= 'accuracy')

fit_model <- model %>% fit(train_image,train_labels,epochs=30,batch_size=32,validation_split=0.25)
plot(fit_model)
evaluate_model <- model %>% evaluate(test_image,test_labels)
print(evaluate_model)
prediction <- model %>% predict_classes(test_image)
table(Predicted=prediction,Actual=test_lab)